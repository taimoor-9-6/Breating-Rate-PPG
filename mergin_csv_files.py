# -*- coding: utf-8 -*-
"""Mergin_csv_files.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10UiQRotJCP4jWguXWZYCSS0alnY32ovS
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

#Loading all the csv files 
for i in range(1,54):
  locals()["B"+str(i)]=pd.read_csv('/content/drive/MyDrive/RAship/32-8/bidmc'+str(i)+'.csv',header=None)
  locals()["B"+str(i)+"_true"]=pd.read_csv('/content/drive/MyDrive/RAship/32-8/bidmc'+str(i)+'_true.csv',header=None)
  # locals()["B"+str(i)+"_true"]=locals()["B"+str(i)+"_true"].drop(locals()["B"+str(i)+"_true"].index[0])

# for i in range(1,54):
#   locals()["B"+str(i)]=pd.read_csv('/content/drive/MyDrive/RAship/P=4/'+str(i)+'.csv',header=None)

#Merging all the csv files
frames=[]
frames_result=[]
for i in range(1,54):
  frames.append(locals()["B"+str(i)])
  frames_result.append(locals()["B"+str(i)+"_true"])
result=pd.concat(frames)
result_true=pd.concat(frames_result)
print(result.shape)
print(result_true.shape)

#Resetting index
result=result.reset_index(drop=True)
result_true=result_true.reset_index(drop=True)

#Finding all the empty/NaN values and removing them
##Filtering out rows with NaN
def check_null_col(col):
    null_columns=col.columns[col.isnull().any()]
    indx=col.index
    empty_rows=indx[null_columns]
    return col[null_columns].isnull().sum(),null_columns

dataset_check_NaN,empty_rows=check_null_col(result_true)
print("Name of column and number of Null values in the dataset")
print(dataset_check_NaN)
print(empty_rows)
print("Size of dataset =",result_true.shape)

x=result_true.isnull()
x=x[x[0]==True]
x=x.index
x
result=result.drop(x)
result.shape

#Deleting the rows with NaN values to avoid discrepancy
dataset_temp=result_true
dataset_temp=dataset_temp.dropna()
dataset_temp=dataset_temp.reset_index(drop=True)
print(dataset_temp.shape)
dataset_temp
result_true=dataset_temp

#Resetting index
result=result.reset_index(drop=True)
result_true=result_true.reset_index(drop=True)

#Printing final shapes of results and results_true
print("Shape of Results=", result.shape)
print("Shape of Results_true=", result_true.shape)

#Exporting the dataframes as csv files into google drive
with open('drive/My Drive/RAship/DL_32_8_result_true.csv', 'w') as f:
  result_true.to_csv(f)
with open('drive/My Drive/RAship/DL_32_8_result.csv', 'w') as f:
  result.to_csv(f)

